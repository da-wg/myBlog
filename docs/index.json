[{"content":"CryptoZombies\u0026rsquo;s Website\n Note: I already have a little bit of programming experience so I will be relating some of the concepts to Javascript/C++ concepts. A great resource for learning Javascript is freeCodeCamp\u0026rsquo;s Javascript Algorithms and Data Structures Certification course\n Lesson 1 Solidity\u0026rsquo;s code is encapsulated in contracts.\ncontract: fundamental building block of Ethereum applications - all variables and functions belong to a contract. Starting point of all your projects\npragma solidity: version of Solidity compiler you wish to use state variables - permanently stored in contract storage\nstructs: - objects\narrarys: - two types:\n fixed arrays: Person[2] fixedArrary; dynmaic arrays: Person[] people; public arrays: Solidity automatically create a getter method: Person[] public people; .push() to add to back of array  functions: - things to note:\n when passing in by reference, use memory start function parameter names with _ good practice to mark private as default (name private function starting with _) returns (string memory): return type view: view-only, no modifications (const in C++) pure: not access any data in the app (Solidity is good at telling you when to use view vs. pure)  keccak256: built in hash function. One purpose is for pseudo-random number generation. Note: not secure.\ntypecasting: converting between data types\nevents: way for your contract to communicate that something happened on the blockchain to your app front-end, which can be \u0026lsquo;listening\u0026rsquo; for certain events and take action when they happen. Web3.js: Javascript library for Ethereum that allows you to write a frontend that interacts with the contract.\npragma solidity \u0026gt;=0.5.0 \u0026lt;0.6.0; contract ZombieFactory { event NewZombie(uint zombieId, string name, uint dna); uint dnaDigits = 16; uint dnaModulus = 10 ** dnaDigits; struct Zombie { string name; uint dna; } Zombie[] public zombies; function _createZombie(string memory _name, uint _dna) private { uint id = zombies.push(Zombie(_name, _dna)) - 1; emit NewZombie(id, _name, _dna); } function _generateRandomDna(string memory _str) private view returns (uint) { uint rand = uint(keccak256(abi.encodePacked(_str))); return rand % dnaModulus; } function createRandomZombie(string memory _name) public { uint randDna = _generateRandomDna(_name); _createZombie(_name, randDna); } }  Lesson 2 addresses: Owned by a specific user, we can use it as a unique ID for ownership (set to the Ethereum address that called the function)\nmapping: Key-value store for storing and looking up date (dictionaries)\nimport: same as import in Javascript\ninterface: used to interact with another contract on the blockchain (syntactically the same as interfaces in C++). Note: In Solidity, you can return more than one value from a function\nfunctions:\n msg.sender: address of the person (or smart contract) who called the current function. In Solidity, function execution always needs to start with an external caller so there will always be a msg.sender. Gives you security of the Ethereum blockchain (only way to modify somebody elses' data is to steal their private key) require: function stops executing if some condition is not true (like Racket error checking). Note: Solidity does not have native string comparison inheritance: same as inheritance in C++ storage vs. memory: storage is permanent, memory is temporary (eg. hard drive vs RAM or local vs global variable) internal and external:  internal is same as private, but accessible to contracts that inherit this contract external is like public, but functions can ONLY be called from outside the contract    zombiefactory.sol:\npragma solidity \u0026gt;=0.5.0 \u0026lt;0.6.0; contract ZombieFactory { event NewZombie(uint zombieId, string name, uint dna); uint dnaDigits = 16; uint dnaModulus = 10 ** dnaDigits; struct Zombie { string name; uint dna; } Zombie[] public zombies; mapping (uint =\u0026gt; address) public zombieToOwner; mapping (address =\u0026gt; uint) ownerZombieCount; function _createZombie(string memory _name, uint _dna) internal { uint id = zombies.push(Zombie(_name, _dna)) - 1; zombieToOwner[id] = msg.sender; ownerZombieCount[msg.sender]++; emit NewZombie(id, _name, _dna); } function _generateRandomDna(string memory _str) private view returns (uint) { uint rand = uint(keccak256(abi.encodePacked(_str))); return rand % dnaModulus; } function createRandomZombie(string memory _name) public { require(ownerZombieCount[msg.sender] == 0); uint randDna = _generateRandomDna(_name); randDna = randDna - randDna % 100; _createZombie(_name, randDna); } } zombiefeeding.sol:\npragma solidity \u0026gt;=0.5.0 \u0026lt;0.6.0; import \u0026#34;./zombiefactory.sol\u0026#34;; contract KittyInterface { function getKitty(uint256 _id) external view returns ( bool isGestating, bool isReady, uint256 cooldownIndex, uint256 nextActionAt, uint256 siringWithId, uint256 birthTime, uint256 matronId, uint256 sireId, uint256 generation, uint256 genes ); } contract ZombieFeeding is ZombieFactory { address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; KittyInterface kittyContract = KittyInterface(ckAddress); function feedAndMultiply(uint _zombieId, uint _targetDna, string memory _species) public { require(msg.sender == zombieToOwner[_zombieId]); Zombie storage myZombie = zombies[_zombieId]; _targetDna = _targetDna % dnaModulus; uint newDna = (myZombie.dna + _targetDna) / 2; if(keccak256(abi.encodePacked(_species)) == keccak256(abi.encodePacked(\u0026#34;kitty\u0026#34;))) { newDna = newDna - newDna % 100 + 99; } _createZombie(\u0026#34;NoName\u0026#34;, newDna); } function feedOnKitty(uint _zombieId, uint _kittyId) public { uint kittyDna; (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId); feedAndMultiply(_zombieId, kittyDna, \u0026#34;kitty\u0026#34;); } }  Lesson 3 After you deploy a contract, it\u0026rsquo;s immutable, meaning it can never be modified or updated again. If there\u0026rsquo;s a flaw in your contract code, there\u0026rsquo;s no way for you to patch it later. You would have to tell your users to start using a different smart contract address that has the fix. Because of this, it is often smart to have a function that allows up to change addresses that rely on external dependencies, in case something happens to those contracts in the future.\nOwnable: contracts that give owners special privileges:\n modifiers: executes before the main function gets executed (mostly used to add require checks). onlyOwner: only the owner can call the function OpenZeppelin: library of secure and community-vetted smart contracts that you can use in your own DApps.  Gas:\n how much gas is required to execute a function depends on how complex the function\u0026rsquo;s logic is, based on how much computing resources will be required to perform that operation (eg. writing to storage is much more expensive than adding two ints) total gas cost is the sum of the gas costs of all its individual operations code optimization is much more important in Ethereum than any other programming language because there is a real cost to users in structs, using smaller-sized uint will allow Solidity to pack these variables together to take up less storage. You also want to cluster identical data types together.  Time Units:\n now: unix timestamp of latest block Solidity also has seconds, minutes, hours, days, weeks, years as default   ","permalink":"/posts/cryptozombies/","summary":"CryptoZombies\u0026rsquo;s Website\n Note: I already have a little bit of programming experience so I will be relating some of the concepts to Javascript/C++ concepts. A great resource for learning Javascript is freeCodeCamp\u0026rsquo;s Javascript Algorithms and Data Structures Certification course\n Lesson 1 Solidity\u0026rsquo;s code is encapsulated in contracts.\ncontract: fundamental building block of Ethereum applications - all variables and functions belong to a contract. Starting point of all your projects","title":"cryptoZombies [solidity]"},{"content":"Sources: Finematics\nNote: I\u0026rsquo;m already familiar with the basics of DeFi (eg. what it is, key projects, Uniswap, MetaMask) so there won\u0026rsquo;t be any notes after those things. If you wish to start at the beginning, the finematics article is a great start\nView my project specific posts:\n Lending and Borrowing: One of the most important aspects of any financial system\nmoney market: area of traditional finance that specializes in short term lending and borrowing\nIn crypto space, lending and borrowing occurs in two ways:\n DeFi: AAVE, Compound etc CeFi: BlockFi, Celsius etc.  Value Proposition of DeFi Lending: Borrowing and lending in a decentralized, permissionless way while retaining full custody of your coins\nCurrently, all defi loans are over-collateralized (possible innovation opportunity?)\nover-collateralized: borrowers has to supply collateral that is worth more than the loan they want to take. Why would somebody do this?\n don\u0026rsquo;t want to sell their tokens delay or avoid capital gain taxes increase leverage  collateral factor: determines how much can be borrowed based on the quality of the collateral (eg. DAI and ETH is 0.75)\n when borrowing, borrowed amount must stay below their collateral times collateral factor if it goes lower, they will have their loan liquidated  interest APY - calculated per Ethereum block (meaning variable APY)\nSidenote: Seems like an obvious limitation of def; a variable APY that\u0026rsquo;s ever-changing and volatile requires people to constantly check in on their APY to ensure they don\u0026rsquo;t get liquidated (AAVE\u0026rsquo;s stable APY is average of last 30 days which is still relatively short). For long investments, like mortgage, there has to be a way to have a long-term stable APY\nExample:\n User deposits 10ETH in Compound, gets a certain number of CETH in return based on exchange rate (eg. new market set to 0.02) CETH then accumulates interest with each ETH block (exchange rate increases depending on supply APY) AAVE is similar except ATokens are pegged to underlying tokens at 1:1   Liquidity Pools Traditional stock and crypto exchanges (eg. Coinbase and Binance) use an order-book model:\n bidders try to buy for as low as possible while seller try to sell for as high as possible. They then converge on a price Market makers: entities who are willing to sell at a particular price (buy order, sell order). Without market makers, exchange instantly becomes illiquid  Order-book models in DeFi:\n this type of exchange is not replicated in DeFi because it would be slow, expensive and have poor UI/UX Ethereum has throughput of 12-15 transactions per second and 10-19s block times. Not viable for the mass quantities of every-changing orders on traditional exchanges. It also has a gas fee for every interaction with a smart contract so market makers would go bankrupt second layer solutions also don\u0026rsquo;t work because of liquidity issues and transactions required to be sent in \u0026amp; out of 2nd layer  Liquidity Pools: Pools of tokens that are locked in smart contracts\n each pool holds two tokens, creating a new market for that pair (eg. DAI/ETH) first LP for a pool sets the initial price for the assets. there is an incentive for first LP and every LP afterwards to provide equal value of both tokens to prevent an arbitrage opportunity LPs get LP tokens back in proportion to how much they provided to the pool each trade has a 0.3% fee which gets proportionally distributed to all LP token holders Automated Market Maker: mechanism that adjusts price after every trade according to a deterministic algorithm Things to research: Alpha Homora  https://defipulse.com/blog/alpha-homora-v2   BadgerDAO  ","permalink":"/posts/defi/","summary":"Sources: Finematics\nNote: I\u0026rsquo;m already familiar with the basics of DeFi (eg. what it is, key projects, Uniswap, MetaMask) so there won\u0026rsquo;t be any notes after those things. If you wish to start at the beginning, the finematics article is a great start\nView my project specific posts:\n Lending and Borrowing: One of the most important aspects of any financial system\nmoney market: area of traditional finance that specializes in short term lending and borrowing","title":"DeFi"},{"content":"Link to original videos\n #1: Candlestick Charts What is technical analysis:  way to make probabilistic forecasts of future price behaviour  you don\u0026rsquo;t have to be a technical trader, you can use it to look for best risk/reward long entries if you\u0026rsquo;re fundamentally bullish on an asset   can be thought of as a risk management tool  Candlestick Anatomy:  red = closing price below opening price green = closing price above opening price OHLC = Open, High, Low, Close  Side note: lines drawn on a particular time frame are still displayed at different time frames. You can label them to give you context without having to jump back to the original time frame\nTime Frames:  dictates the time period that 1 candle represents for beginners, focus on higher time frames (eg. Cred\u0026rsquo;s favourites are Daily and Hourly time frames)  Candle closes are very significant, especially at higher time frames -\u0026gt; don\u0026rsquo;t get ahead of yourself before a candle close\nCandlestick Patterns:  lots of candlestick patterns are reversal patterns. Beginner mistake is to try to trade every instance regardless of context. Don\u0026rsquo;t look for candlestick patterns when price is ranging, but do when there is a strong upwards/downwards trend Babypips Cheat Sheet Patterns mentioned in video:  Doji (Neutral)  Shooting Star (Bearish)  Hammar (Bullish)  Bullish Engulfing (Bullish)  Bearish Engulfing (Bearish)  Tweezer Tops (Bearish)  Tweezer Bottoms (Bullish)      #2: Risk Management ","permalink":"/posts/cryptocred/cryptocred/","summary":"Link to original videos\n #1: Candlestick Charts What is technical analysis:  way to make probabilistic forecasts of future price behaviour  you don\u0026rsquo;t have to be a technical trader, you can use it to look for best risk/reward long entries if you\u0026rsquo;re fundamentally bullish on an asset   can be thought of as a risk management tool  Candlestick Anatomy:  red = closing price below opening price green = closing price above opening price OHLC = Open, High, Low, Close  Side note: lines drawn on a particular time frame are still displayed at different time frames.","title":"CryptoCred's TA Series"},{"content":"Hey there and welcome to my blog! This blog will help document my journey into the more technical aspects of crypto and trading. Since discovering the world of Bitcoin and crypto 9 months ago, I\u0026rsquo;ve spent majority of my free time keeping up with the space. When I wasn\u0026rsquo;t studying, I was busy learning about new projects and \u0026ldquo;trading\u0026rdquo; on Uniswap. Today, I feel confident in my understanding of:\n the history and major dates of Bitcoin and Ethereum names of majority of the top 100 coins and what they are areas with the potential for greatest growth and innovation in 2021 and beyond (eg. DeFi, NFTs, Insurance) \u0026ldquo;Blue-chip\u0026rdquo; DeFi projects and basic understanding of their value proposition the hottest memes on crypto twitter (I personally think this is the most important)  However, I realized there are still various topics that I haven\u0026rsquo;t spent as much time on. These include:\n Technical aspects of defi protocols (eg. how SUSHI fees are generated and distributed, how RUNE is able to do cross-chain swaps vs atomic swaps, ALPHA leveraged lending) NFTs (eg. how they are able to verify ownership, what are the next logical \u0026ldquo;next steps\u0026rdquo; for projects in this space) Polkadot (eg. the ecosystem, where it excels vs Ethereum) Insurance (eg. how insurance works in the crypto world) Solidity  I thought a blog will allow me to document my learning as well as push me to be as thorough as possible when researching these topics. Eventually, this blog will hopefully also act as a \u0026ldquo;portfolio\u0026rdquo; of sorts, reflective of the time I\u0026rsquo;ve spent in this space, since I want to do a co-op work term in this field.\nMost of the posts for the next couple of months will simply be me making notes straight from the videos and resources that I\u0026rsquo;m learning from. However, as time goes on, the goal is to start contributing insightful and critical posts about things that I notice.\nAbout me: I\u0026rsquo;m a 20 year old post-secondary student from Canada. Like many others, I first learned about Bitcoin during its parabolic run in 2017 and even bought some near the peak. However, I never did any research into what I bought and viewed it simply as a \u0026ldquo;number go up\u0026rdquo; investment and so as the price plummeted in 2018, so did my interest in it.\nFast foward to 2020 and I began seriously looking into investing in the stock market for the first time right before COVID hit and the market crashed in March 2020 (I know, impeccable timing). The subsequent \u0026ldquo;V-shaped\u0026rdquo; reversal in the stock market and the massive stimulus cheques gave birth to many hilarious memes around the governmental role surrounding money (printer go brrr), but although I couldn\u0026rsquo;t put my finger on it, something about the whole situation didn\u0026rsquo;t feel right to me. At the same time, I didn\u0026rsquo;t know to look for alternatives because the system\u0026rsquo;s always been like this right? Governments control the money, banks are the middleman and they\u0026rsquo;ll never knowingly relinquish that power so what\u0026rsquo;s the point right? Oh boy.\nDuring that time, I watched a lot of Andrew Jikh\u0026rsquo;s videos since he seemed to recognize the same problems I saw in the stock market. However, it was one video in particular with Raoul Pal that started this journey, where he mentions Bitcoin as an inflation hedge. Huh? The last time I had heard about Bitcoin in any meaningful capacity was in late 2017 and never once was it mentioned in the same sentence as \u0026ldquo;inflation hedge\u0026rdquo;. I downloaded The Bitcoin Standard to read during my week off from school because it had sparked my interest and I wanted to learn more. I finished it in one day. It was the first time I was made aware of the history of money and the alternative ways of economic thinking. Before that book, I never knew why we needed a term for fiat money because I (naively) thought that money had always been in this form. Above all else, it made me question our current financial system and I became obsessed with expanding my knowledge in this area.\nThe author of the book, Saifedean Ammous, is known as a \u0026ldquo;Bitcoin maxi\u0026rdquo;, meaning he views other cryptos as nothing more than schemes to get people to sell their Bitcoin. As a result, I also developed tunnel vision around the crypto market with Bitcoin as the light and everything else being distractions. It took 2 months to even give Ethereum the light of day, but after finally looking into it and what it does, I was hooked. It probably helped that I entered during one of the more exciting times for the industry in recent history, later appropriately termed the \u0026ldquo;DeFi Summer\u0026rdquo;, but over the next 6 months I learned everything I could about every hot project coming out or taking over the spotlight. $YFI, $SUSHI, $UNI, $RUNE, $AAVE, $SNX (ASSY anybody?). I will probably make individual posts about all of them at some point, but with each one that I read about, the more convinced I became that decentralized finance could legitimately take over traditional finance.\nLooking back on it now, I was perhaps too excited about Bitcoin and the problems I thought it could solve. Bitcoin is not perfect and neither is any project in this space right now. In fact, there are many big issues ranging from Bitcoins\u0026rsquo;s PoW power consumption to Ethereum\u0026rsquo;s high gas fees (bUt iT mEaNs UsAgE). It definitely won\u0026rsquo;t transition the world into some utopia where everybody will suddenly become financially literate and nobody will ever worry about living paycheque to paycheque.\nHowever, this can also be viewed as an argument for how early we still are. I think the crypto industry as a whole will eventually fix these problems and can evolved into a much more equitable and fair financial system than our current system. Areas like DeFi make me excited for the future of this space. That\u0026rsquo;s why I\u0026rsquo;m invested and why I believe it can become the future of finance (france, for the crypto twitter crowd). Exciting times to be in crypto.\nStructure:  categories will be the broad topics that the blog will be centered around (eg. crypto, trading, stocks, coding) series will be blog posts centered around a particular subsection within a category (eg. Bitcoin, altcoins, React)  There will also be an ongoing \u0026ldquo;book list\u0026rdquo; blog post which will be updated with what books I\u0026rsquo;m reading and any notes about the books I\u0026rsquo;ve finished.\nHow I created the website: The website was created using Hugo and the PaperMod theme and then hosted on GitHub Pages. The website/repos are listed here:\n this blog Hugo hugo-PaperMod  Copyright blah blah blah, feel free to clone this blog and make any changes you wish.\n","permalink":"/posts/blog-init/","summary":"Hey there and welcome to my blog! This blog will help document my journey into the more technical aspects of crypto and trading. Since discovering the world of Bitcoin and crypto 9 months ago, I\u0026rsquo;ve spent majority of my free time keeping up with the space. When I wasn\u0026rsquo;t studying, I was busy learning about new projects and \u0026ldquo;trading\u0026rdquo; on Uniswap. Today, I feel confident in my understanding of:\n the history and major dates of Bitcoin and Ethereum names of majority of the top 100 coins and what they are areas with the potential for greatest growth and innovation in 2021 and beyond (eg.","title":"blog init/about me"},{"content":"","permalink":"/archive/","summary":"archives","title":"Archive"},{"content":"","permalink":"/search/","summary":"search","title":"Search"}]